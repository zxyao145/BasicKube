@namespace BasicKube.Web.Components
@inherits CreateResForm

<div>
    <div style="margin-bottom: 0.75rem;">
        <Space>
            <SpaceItem>
                应用组
            </SpaceItem>
            <SpaceItem Style="width: 300px;">
                <Input Placeholder="应用组"
                       MaxLength="32"
                       @bind-Value="@DeployCreateCommand.GrpName" 
                       Disabled="@IsEdit" />
            </SpaceItem>

            <SpaceItem Style="margin-left: 1rem;">
                环境
            </SpaceItem>
            <SpaceItem Style="width: 180px;">
                <AppEnvSelect
                    DefaultEnvName="@(DeployCreateCommand.Env)"
                    Disable="@IsEdit"
                    @bind-EnvName="DeployCreateCommand.Env" />
      
            </SpaceItem>
            
            
            <SpaceItem Style="margin-left: 1rem;">
                副本数
            </SpaceItem>
            <SpaceItem>
                <AntDesign.InputNumber @bind-Value="@DeployCreateCommand.Replicas"
                                       Min="0"
                                       PlaceHolder="">
                </AntDesign.InputNumber>
            </SpaceItem>
        </Space>
    </div>

    <div>
        <Tabs @ref="@_tabs" Style="border-bottom: 1px solid #f0f0f0; padding: 1rem;"
              DefaultActiveKey="main"
              Type="@TabType.EditableCard"
              OnAddClick="OnAddClick"
              OnClose="OnTabClose"
              @bind-ActiveKey="_activeKey">
            @foreach (var containerInfo in _panes)
            {
                var title = containerInfo.Name;
                Console.WriteLine("title:" + title);

                <TabPane Key="@(containerInfo.Index + "")"
                         Tab="@title"
                         Closable="@(title != "main")">

                    <CreateContainer @key="containerInfo.Index"
                                     ContainerInfo="@containerInfo"
                                     OnNameChange="@OnNameChange"
                                     />

                </TabPane>

             }
        </Tabs>
    </div>

</div>

@code {

    private DeployEditCommand _createCommand = new DeployEditCommand();
    public DeployEditCommand DeployCreateCommand
    {
        get => _createCommand;
        set
        {
            _createCommand = value;
            _panes.Clear();
            _panes.AddRange(_createCommand.Containers);
            StateHasChanged();
        }
    } 
    public CreateDeployAppForm()
    {
        Title = "Deploy";
    }

    protected override async Task OnOkAsync()
    {
        DeployCreateCommand.Containers = _panes;
        DeployCreateCommand.DeployName = $"{DeployCreateCommand.GrpName}-{DeployCreateCommand.Env}";
        DeployCreateCommand.IamId = IamId;

        var http = ServiceProvider.GetRequiredService<DeployHttp>();
        bool res = false;
        if (IsEdit)
        {
            res = await http.Update(DeployCreateCommand);
        }
        else
        {
            res = await http.Create(DeployCreateCommand);
        }

        _ = res ? (NoticeSuccess(MsgPrefix + "成功")) : (NoticeError(MsgPrefix + "失败"));

        if (OnOk != null)
        {
            await OnOk();
        }
        if (res)
        {
            await this.CloseAsync();
        }
    }

    private Tabs? _tabs;
    readonly List<ContainerInfo> _panes = new List<ContainerInfo>()
    {
        new ContainerInfo()
        {
            Name = "main"
        }
    };
    private string _activeKey = "";
    private void OnAddClick()
    {
        var c = new ContainerInfo()
            {
                Index = _panes.Count,
                Name = "container" + _panes.Count
            };
        _activeKey = c.Index + "";
        _panes.Add(c);
        StateHasChanged();
    }

    void OnTabClose(string key)
    {
        var c = _panes.Find(x => x.Index == int.Parse(key));
        if (c != null)
        {
            _panes.Remove(c);
        }
    }
   
    private void OnNameChange()
    {
        StateHasChanged();
    }
}