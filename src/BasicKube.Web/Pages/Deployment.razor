@page "/pages/deployment"
@using EasyKube.Web.Components.BcdForms
@using System.Text.Json
@using System.Text
@inject EasyKubeHttp EasyKubeHttp
@implements IDisposable

<div style="margin-bottom: 1rem;">
    <Space>
        <SpaceItem>
            集群：
        </SpaceItem>
        <SpaceItem Style="min-width: 500px;">
            <NsList NsChanged="@OnNsChanged"></NsList>
        </SpaceItem>
    </Space>
</div>

@if (_deployDetails is { Count: > 0 })
{
    var deployIndex = 0;
    <Collapse DefaultActiveKey="@(new []{"0"})">
        @foreach (var deployDetail in _deployDetails)
        {
            var header = $"{deployDetail.DeployName}({deployDetail.ReadyReplicas}/{deployDetail.Replicas})";
            <Panel @key="@deployDetail.DeployName" Header="@header"
                   Key="@(deployIndex + "")"
                   Class="deploy-panel">
                <ExtraTemplate>
                    <Button OnClick="@(async () => await OnScaleClickAsync(deployDetail))" Type="@ButtonType.Link">
                        伸缩
                    </Button>
                </ExtraTemplate>
                <ChildContent>
                    <Collapse DefaultActiveKey="@(new[] { deployDetail.DeployName + "0" })">
                        <CascadingValue Value="@(_nsName)" Name="@("NsName")">
                            <PodDetailsItem DeployName="@(deployDetail.DeployName)"
                                PodDetails="@(deployDetail.PodDetails)">
                            </PodDetailsItem>
                        </CascadingValue>
                    </Collapse>
                </ChildContent>
            </Panel>

            deployIndex += 1;
        }
    </Collapse>
}

<style>
    .deploy-panel > .ant-collapse-content {
        background-color: #efefef;
    }

    .pod-panel .ant-collapse-content-box {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        /*display: grid;
        grid-template-rows: 180px;
        grid-template-columns: 300px;
        grid-row-gap: 10px;
        grid-column-gap: 10px;*/
    }

        .pod-panel .ant-collapse-content-box > div.ant-card {
            margin: 0.75rem;
        }

</style>

@code
{
    [Parameter]
    public int? IamId { get; set; }

    private string? _nsName = "default";
    private Timer? _timer = null;

    private async Task OnNsChanged(string? value)
    {
        _nsName = value;
        await RefreshDeployInfo();
        _timer ??= new Timer(Callback, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private async void Callback(object? state)
    {
        await RefreshDeployInfo();
    }

    private List<DeployDetail>? _deployDetails;

    private async Task RefreshDeployInfo()
    {
        var data = await EasyKubeHttp.Client.GetFromJsonAsync<ApiResultDto<List<DeployDetail>>>
            ($"/api/Deploy/Details?iamId={IamId ?? 0}&deployName=&ns={_nsName}");
        _deployDetails = data?.Data;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnScaleClickAsync(DeployDetail deployDetail)
    {
        var modal = new ScaleForm();
        modal.Num = deployDetail.PodDetails.Count;

        async Task OnOk(int num)
        {
            var scaleCmd = new DeployScaleCommand
                {
                    DeployName = deployDetail.DeployName,
                    Replicas = num,
                    IamId = IamId ?? 0
                };
            var json = JsonSerializer.Serialize(scaleCmd);

            var jsonContent = new StringContent(json, Encoding.UTF8, "application/json");

            using HttpResponseMessage response = await EasyKubeHttp.Client.PostAsync($"/api/Deploy/Scale", jsonContent);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var apiResult = JsonSerializer.Deserialize<ApiResultDto<List<DeployDetail>>>(jsonResponse);
            }
        }

        modal.OnOk = (Func<int, Task>)OnOk;
        await modal.ShowAsync();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
