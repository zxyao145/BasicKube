@using IconPark
@inject IconService iconService
@inject NavigationManager _navigationManager

<Menu Theme="MenuTheme.Light"
      DefaultSelectedKeys=@(new[]{ _defaultActiveKey })
      SelectedKeys="@(new[]{_activeKey})"
      DefaultOpenKeys="@_openKeys"
      Mode="MenuMode.Inline">
    <MenuItem Key="pages/kube/deployappgrplist">
        <IconTemplate>
            <AllApplication />
        </IconTemplate>
        <ChildContent>
            <NavLink class="nav-link" href="@(Routes.DeployGrpPage)" Match="NavLinkMatch.All">
                应用组
            </NavLink>
        </ChildContent>
    </MenuItem>
    <MenuItem Key="pages/kube/svcgrplist">
        <IconTemplate>
            <ConnectionPoint />
        </IconTemplate>
        <ChildContent>
            <NavLink class="nav-link" href="@(Routes.SvcGrpPage)">
                服务组
            </NavLink>
        </ChildContent>
    </MenuItem>
    <MenuItem Key="pages/kube/ingressgrplist">
        <IconTemplate>
            <LinkIn />
        </IconTemplate>
        <ChildContent>
            <NavLink class="nav-link" href="@(Routes.IngGrpPage)">
                路由组
            </NavLink>
        </ChildContent>
    </MenuItem>
    <SubMenu Key="advanced">
        <TitleTemplate>
            <span>
                <MoreTwo />
                <span>高级操作</span>
            </span>
        </TitleTemplate>
        <ChildContent>
            <MenuItem Key="pages/kube/daemonsetappgrplist">
                <IconTemplate>
                    <Shield />

                </IconTemplate>
                <ChildContent>
                    <NavLink class="nav-link" href="@(Routes.DaemonSetAppGrpPage)">
                        守护应用组
                    </NavLink>
                </ChildContent>
            </MenuItem>
            <MenuItem Key="pages/kube/jobgrplist">
                <IconTemplate>
                    <AlarmClock />

                </IconTemplate>
                <ChildContent>
                    <NavLink class="nav-link" href="@(Routes.JobGrpPage)">
                        任务组
                    </NavLink>
                </ChildContent>
            </MenuItem>

            <MenuItem Key="pages/kube/cronjobgrplist">
                <IconTemplate>
                    <Timer />

                </IconTemplate>
                <ChildContent>
                    <NavLink class="nav-link" href="@(Routes.CronJobGrpPage)">
                        定时任务组
                    </NavLink>
                </ChildContent>
            </MenuItem>
        </ChildContent>
    </SubMenu>
</Menu>


@code {
    [CascadingParameter(Name = "IamId")]
    public int IamId { get; set; }


    private static Dictionary<string, string> _openKeysDict = new Dictionary<string, string>()
        {
            ["pages/kube/deployappgrplist"] = "advanced",
            ["pages/kube/jobgrplist"] = "advanced",
            ["pages/kube/cronjobgrplist"] = "advanced",
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await iconService.CreateFromIconfontCN("//at.alicdn.com/t/font_2735473_hi62ezq5579.js");
        }
    }
    protected override void OnInitialized()
    {
        _navigationManager!.LocationChanged += (s, e) =>
        {
            //Console.WriteLine("nav menu LocationChanged");
            CalcActiveKey();
        };
    }

    const string _defaultActiveKey = "pages/kube/deployappgrplist";

    string _activeKey = _defaultActiveKey;
    private string[] _openKeys = new string[0];

    private void CalcActiveKey()
    {
        var relativePath = _navigationManager!.ToBaseRelativePath(_navigationManager.Uri).ToLower();
        var arr = relativePath.Split("/");
        if (arr.Length < 2)
        {
            _activeKey = _defaultActiveKey;
        }
        else
        {
            _activeKey = string.Join("/", arr[0..2]);
        }

        _openKeys = _openKeysDict.ContainsKey(_activeKey)
                    ? new string[] { _openKeysDict[_activeKey] }
                    : new string[0];
        //Console.WriteLine("_activeKey:" + _activeKey);
        StateHasChanged();
    }


    public async Task StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}

