@page "/pages/kube/cronJobGrpList/{GrpName?}"
@inject KubeHttpClient KubeHttp
@inject NavigationManager NavigationManager

<div class="page-content">
    <Breadcrumb Style="margin-bottom: 1rem;">
        @if (string.IsNullOrWhiteSpace(GrpName))
        {
            <BreadcrumbItem>
                <b>
                    <IconPark.Timer /> 定时任务组
                </b>
            </BreadcrumbItem>
        }
        else
        {
            <BreadcrumbItem OnClick="ReturnGrpList">
                <b class="cursor-pointer">
                    <IconPark.Timer /> 定时任务组
                </b>
            </BreadcrumbItem>
            <BreadcrumbItem>
                <b>定时任务</b>
            </BreadcrumbItem>
        }
    </Breadcrumb>

    <blockquote class="operate-wrapper">
        <Button Type="@ButtonType.Primary" Size="small" OnClick="@OnCreateJobClick">新建 CronJob</Button>
    </blockquote>

    @if (string.IsNullOrWhiteSpace(GrpName))
    {
        <AntList DataSource="@_grpInfos" TItem="CronJobGrpInfo">
            <ListItem Class="page-resource-list-item" OnClick="() => OnGrpClick(context)">
                <ListItemMeta Description="">
                    <TitleTemplate>
                        @context.Name
                    </TitleTemplate>
                </ListItemMeta>
            </ListItem>
        </AntList>
    }
    else
    {
        <CascadingValue Value="@(this)" IsFixed="true">
            <CronJobList GrpName="@GrpName" />
        </CascadingValue>
    }
</div>

@code {

    [CascadingParameter(Name = "IamId")]
    public int IamId { get; set; }

    [Parameter]
    public string? GrpName { get; set; }

    private List<CronJobGrpInfo> _grpInfos = new();

    protected override async Task OnParametersSetAsync()
    {
        await GetGrpList();
    }

    private async Task GetGrpList()
    {
        _grpInfos = await KubeHttp.CronJobHttp.ListGrp(IamId);
        StateHasChanged();
    }

    private void OnGrpClick(CronJobGrpInfo context)
    {
        NavigationManager.NavigateTo($"/{Routes.CronJobGrpPage}/{context.Name}");
    }

    internal void ReturnGrpList()
    {
        NavigationManager.NavigateTo($"/{Routes.CronJobGrpPage}");
    }

    private async Task OnCreateJobClick()
    {
        var form = new CreateCronJobAppForm();
        form.IamId = IamId;
        form.OnOk = async () =>
        {
            await GetGrpList();
        };
        await form.ShowAsync();
    }
}
